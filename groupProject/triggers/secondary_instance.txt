CREATE OR REPLACE FUNCTION update_ch_stats_sec() RETURNS trigger as $$
DECLARE
  update_character RECORD;
  secondary_stats RECORD;
BEGIN
  SELECT * FROM character
  WHERE character.name = NEW.cname
  INTO update_character;
  
  SELECT * FROM secondary,equipment,secondary_instance
  WHERE secondary_instance.sid = NEW.sid AND secondary_instance.eid = secondary.eid AND secondary.eid = equipment.eid
  INTO secondary_stats;

  UPDATE character
  SET life = update_character.life + secondary_stats.life, str = update_character.str + secondary_stats.str, def = update_character.def+secondary_stats.def, speed = update_character.speed + secondary_stats.speed, power = update_character.power + secondary_stats.power
  WHERE character.name = update_character.name;

  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_ch_stats_sec_trigger
AFTER INSERT ON secondary_instance
FOR EACH ROW
EXECUTE PROCEDURE update_ch_stats_sec();


CREATE OR REPLACE FUNCTION update_ch_stats_sec_delete() RETURNS trigger as $$
DECLARE
  update_character RECORD;
  secondary_stats RECORD;
BEGIN
  DELETE * FROM secondary_gem WHERE sid = OLD.sid;
  SELECT * FROM character
  WHERE character.name = OLD.cname
  INTO update_character;
  
  SELECT * FROM secondary,equipment,secondary_instance
  WHERE secondary_instance.sid = OLD.sid AND secondary_instance.eid = secondary.eid AND secondary.eid = equipment.eid
  INTO secondary_stats;

  UPDATE character
  SET life = update_character.life - secondary_stats.life, str = update_character.str - secondary_stats.str, def = update_character.def-secondary_stats.def, speed = update_character.speed - secondary_stats.speed, power = update_character.power - secondary_stats.power
  WHERE character.name = update_character.name;

  RETURN OLD;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_ch_stats_sec_delete_trigger
before delete ON secondary_instance
FOR EACH ROW
EXECUTE PROCEDURE update_ch_stats_sec_delete();

CREATE OR REPLACE FUNCTION check_secondary_level() RETURNS trigger as $$

DECLARE 
  char_level INTEGER;
  secondary_min_level INTEGER;
BEGIN
  SELECT level FROM character WHERE name = NEW.cname INTO char_level;
  SELECT min_level FROM secondary, equipment 
  WHERE NEW.eid = secondary.eid AND secondary.eid = equipment.eid
  INTO secondary_min_level;
 
    IF char_level < secondary_min_level THEN
        RAISE EXCEPTION 'It cannot equip character.Equipment level can not be greater than character level';
        END IF;
return new;
END;
$$ LANGUAGE plpgsql;


CREATE TRIGGER check_secondary_level_trigger 
BEFORE INSERT ON secondary_instance
FOR EACH ROW
EXECUTE PROCEDURE check_secondary_level();

CREATE OR REPLACE FUNCTION check_gem_number_secondary() RETURNS trigger as $$
DECLARE
  secondary_record RECORD;
  gem_number INTEGER;
  max_number INTEGER;
BEGIN
  gem_number := 0;
  SELECT num_slots FROM equipment, secondary_instance, secondary_gem, weapon
  WHERE NEW.sid = secondary_instance.sid AND secondary_instance.eid = secondary.eid AND secondary.eid = equipment.eid
  INTO max_number;

  FOR secondary_record IN EXECUTE 'SELECT * FROM secondary_gem WHERE aid = NEW.aid'
  
  LOOP
  gem_number := gem_number+1;
  END LOOP;
  IF max_number = gem_number THEN
    RAISE EXCEPTION 'This equipment cant have more gems on it!';
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER check_gem_number_secondary_trigger
BEFORE INSERT ON secondary_gem
FOR EACH ROW
EXECUTE PROCEDURE check_gem_number_secondary();


CREATE OR REPLACE FUNCTION check_allowed_equipment()
RETURNS TRIGGER AS $$
DECLARE
    is_allowed boolean;
BEGIN
    SELECT EXISTS (
        SELECT 1
        FROM can_equip, character
        WHERE can_equip.class = character.class
          AND can_equip.eid = NEW.eid
          AND character.name = NEW.cname
    ) INTO is_allowed;

    IF NOT is_allowed THEN
        RAISE EXCEPTION 'The equipment is not allowed for the character class.';
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;


CREATE TRIGGER allowed_secondary_trigger
    BEFORE INSERT OR UPDATE ON secondary_instance
    FOR EACH ROW
    EXECUTE PROCEDURE check_allowed_equipment();