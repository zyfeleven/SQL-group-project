CREATE OR REPLACE FUNCTION update_ch_stats_weapon() RETURNS trigger as $$
DECLARE
  update_character RECORD;
  weapon_stats RECORD;
BEGIN
  SELECT * FROM character
  WHERE character.name = NEW.cname
  INTO update_character;
  
  SELECT * FROM weapon,equipment,weapon_instance
  WHERE weapon_instance.wid = NEW.wid AND weapon_instance.eid = weapon.eid AND weapon.eid = equipment.eid
  INTO weapon_stats;

  UPDATE character
  SET life = update_character.life + weapon_stats.life, str = update_character.str + weapon_stats.str, def = update_character.def+weapon_stats.def, speed = update_character.speed + weapon_stats.speed, power = update_character.power + weapon_stats.power
  WHERE character.name = update_character.name;

  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_ch_stats_weapon_trigger
AFTER INSERT ON weapon_instance
FOR EACH ROW
EXECUTE PROCEDURE update_ch_stats_weapon();


CREATE OR REPLACE FUNCTION update_ch_stats_weapon_delete() RETURNS trigger as $$
DECLARE
  update_character RECORD;
  weapon_stats RECORD;
BEGIN
  DELETE FROM weapon_gem WHERE wid = OLD.wid;
  SELECT * FROM character
  WHERE character.name = OLD.cname
  INTO update_character;
  
  SELECT * FROM weapon,equipment,weapon_instance
  WHERE weapon_instance.wid = OLD.wid AND weapon_instance.eid = weapon.eid AND weapon.eid = equipment.eid
  INTO weapon_stats;

  UPDATE character
  SET life = update_character.life - weapon_stats.life, str = update_character.str - weapon_stats.str, def = update_character.def-weapon_stats.def, speed = update_character.speed - weapon_stats.speed, power = update_character.power - weapon_stats.power
  WHERE character.name = update_character.name;

  RETURN OLD;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_ch_stats_weapon_delete_trigger
BEFORE DELETE ON weapon_instance
FOR EACH ROW
EXECUTE PROCEDURE update_ch_stats_weapon_delete();

CREATE OR REPLACE FUNCTION check_weapon_level() RETURNS trigger as $$

DECLARE 
  char_level INTEGER;
  weapon_min_level INTEGER;
BEGIN
  SELECT level FROM character WHERE name = NEW.cname INTO char_level;
  SELECT min_level FROM weapon,equipment 
  WHERE NEW.eid = weapon.eid AND weapon.eid = equipment.eid
  INTO weapon_min_level;
 
    IF char_level < weapon_min_level THEN
        RAISE EXCEPTION 'it cannot equip character.Equipment level can not be greater than character level';
        END IF;
RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER check_weapon_level_trigger 
BEFORE INSERT ON weapon_instance
FOR EACH ROW
EXECUTE PROCEDURE check_weapon_level();

CREATE OR REPLACE FUNCTION check_allowed_equipment()
RETURNS TRIGGER AS $$
DECLARE
    is_allowed boolean;
BEGIN
    SELECT EXISTS (
        SELECT 1
        FROM can_equip, character
        WHERE can_equip.class = character.class
          AND can_equip.eid = NEW.eid
          AND character.name = NEW.cname
    ) INTO is_allowed;

    IF NOT is_allowed THEN
        RAISE EXCEPTION 'The equipment is not allowed for the character class.';
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER allowed_weapon_trigger
    BEFORE INSERT OR UPDATE ON weapon_instance
    FOR EACH ROW
    EXECUTE PROCEDURE check_allowed_equipment();
